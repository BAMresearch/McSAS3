# src/mcsas3/cli_tools.py

from attrs import define, field, validators
from pathlib import Path

from mcsas3 import mc_data_1d  # , McData2D
from mcsas3 import mc_hat
import yaml

from mcsas3 import mc_plot
from mcsas3.mc_analysis import McAnalysis
import pandas as pd


@define
class McSAS3_cli_optimize(object):
    """Runs the McSAS optimizer from the command line arguments"""

    def checkConfig(self, attribute, value):
        assert value.exists(), f"configuration file {value} must exist"
        assert value.suffix == ".yaml", "configuration file must be a yaml file (and end in .yaml)"

    dataFile: Path = field(kw_only=True, validator=validators.instance_of(Path))
    resultFile: Path = field(kw_only=True, validator=validators.instance_of(Path))
    readConfigFile: Path = field(
        kw_only=True, validator=[validators.instance_of(Path), checkConfig]
    )
    runConfigFile: Path = field(kw_only=True, validator=[validators.instance_of(Path), checkConfig])
    resultIndex: int = field(kw_only=True, validator=[validators.instance_of(int)])
    deleteIfExists: bool = field(kw_only=True, validator=[validators.instance_of(bool)])
    nThreads: int = field(kw_only=True, validator=[validators.instance_of(int)])

    @dataFile.validator
    def fileExists(self, attribute, value):
        assert value.exists(), f"input data file {value} must exist"

    # init is auto-generated by attrs!!!
    def __attrs_post_init__(self):
        self.run()

    def run(self):
        # remove any prior results file:
        if self.resultFile.is_file():
            # only remove result file if it is not the main file!
            # This way, you can add McSAS to an existing nexus file
            if (self.resultFile != self.dataFile) & (self.deleteIfExists):
                self.resultFile.unlink()
        # read the configuration file
        with open(self.readConfigFile, "r") as f:
            readDict = yaml.safe_load(f)
        # load the data
        mds = mc_data_1d.McData1D(filename=self.dataFile, resultIndex=self.resultIndex, **readDict)
        # store the full data in the result file:
        mds.store(self.resultFile)
        # read the configuration file
        with open(self.runConfigFile, "r") as f:
            optDict = yaml.safe_load(f)
        if self.nThreads > 0:
            optDict["nCores"] = self.nThreads
        # run the Monte Carlo method
        mh = mc_hat.McHat(seed=None, resultIndex=self.resultIndex, **optDict)
        md = mds.measData.copy()
        mh.run(md, self.resultFile, resultIndex=self.resultIndex)


@define
class McSAS3_cli_histogrammer(object):
    """Runs the McSAS histogrammer from the command line arguments"""

    def checkConfig(self, attribute, value):
        assert value.exists(), f"configuration file {value} must exist"
        assert value.suffix == ".yaml", "configuration file must be a yaml file (and end in .yaml)"

    resultFile: Path = field(kw_only=True, validator=validators.instance_of(Path))
    histConfigFile: Path = field(
        kw_only=True, validator=[validators.instance_of(Path), checkConfig]
    )
    resultIndex: int = field(kw_only=True, validator=[validators.instance_of(int)])

    def __attrs_post_init__(self):
        self.run()

    def run(self):
        # read the configuration file

        # load the data
        mds = mc_data_1d.McData1D(loadFromFile=self.resultFile, resultIndex=self.resultIndex)

        # read the configuration file
        with open(self.histConfigFile, "r") as f:
            histRanges = pd.DataFrame(list(yaml.safe_load_all(f)))
        # run the Monte Carlo method
        md = mds.measData.copy()
        mcres = McAnalysis(
            self.resultFile, md, histRanges, store=True, resultIndex=self.resultIndex
        )

        # plotting:
        # plot the histogram result
        mp =mcplot.McPlot()
        # output file for plot:
        saveHistFile = self.resultFile.with_suffix(".pdf")
        if saveHistFile.is_file():
            saveHistFile.unlink()
        mp.resultCard(mcres, saveHistFile=saveHistFile)

