name: Build

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  workflow_call:

jobs:
  # make a new version first, release or prerelease
  release:
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

      - name: Checking out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup git user
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      # see *py_ver* in ci/update.py
      - name: Setting up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: |
            ci/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --progress-bar=off -r ci/requirements.txt

      - name: Determine a version number
        shell: sh
        run: |
          set -x
          # creates a release only if there are relevant changes/commits starting with 'fix/feat()'
          semantic-release publish -D version_source=commit \
            -D commit_author="${GITHUB_ACTOR} <${GITHUB_ACTOR}@users.noreply.github.com>"
          if [ -z "$(git tag --points-at HEAD)" ]; then
            # no release, no relevant changes, make prerelease tag
            semantic-release version -D version_source=tag --prerelease
          fi
          git push
          git push --tags

  build:
    # defining this job separately allows to refer to it later
    # as job.needs dependency plus it provides a badge
    needs: [release]
    # convert this to a matrix if builds differ between platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest']
    steps:

      - name: Checking out the repo
        uses: actions/checkout@v3

      # see *py_ver* in ci/update.py
      - name: Setting up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: |
            ci/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --progress-bar=off -r ci/requirements.txt

      - name: Get latest tags
        run: |
          git pull --tags
          echo "git_tag_head='$(git tag --points-at HEAD)'" >> $GITHUB_ENV
          echo "git_tag_head='$(git tag --points-at HEAD)'"

      - name: Set version number
        # modify source files to reflect the current version
        # (relevant for pre-releases indicated by tag only)
        # Does not modify the git history
        if: ${{ env.git_tag_head }}  # there is a tag at the latest commit
        shell: python
        run: |
          from semantic_release.history import set_new_version, get_current_version
          cv = get_current_version()
          print(f"Setting current version '{cv}':", set_new_version(cv))

      - name: Build
        run: tox -e build -v

      - name: Upload package artifact for publishing job
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: dist/*.whl

      - name: Upload source artifact for publishing job
        # upload source package only once
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: dist/*.tar.gz

  publish:
    needs: [build]
    runs-on: 'ubuntu-latest'
    steps:

      - name: Checking out the repo
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --progress-bar=off -r ci/requirements.txt

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist

      - name: Check generated packages
        run: twine check dist/*.*

      - name: Upload packages
        env:
          TWINE_PASSWORD: "${{ secrets.TEST_PYPI_TOKEN }}"
        run: |
          twine upload -u __token__ -r testpypi dist/*.*

      # update status

      - name: Update status badge
        run: python3 ci/make_badges.py good dist/docs/badges/build.svg

      - name: Upload badge for docs finalization later
        uses: actions/upload-artifact@v3
        with:
          name: badges
          path: dist/docs/badges
