name: Coverage

# Controls when the action will run.
on:
  workflow_call:

{% import '.github/workflows/ci-cd.yml' as ci with context %}{# Use some Jinja macros -#}

env:
  DOCS_URL: {{ docs_url }}
  COV_REPORT_BASE_DIR: {{ cov_report_path }}

jobs:
  combine:
    name: Combine coverage data
    runs-on: ubuntu-latest
    outputs:
      total: {{ '${{ steps.total.outputs.total }}' }}
    steps:

      {{ ci.checkout() }}

      {{ ci.setup_python() }}

      {{ ci.pip_install_req() }}

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage

      - name: Combine and report
        id: combine
        run: |
          set -x
          pwd && ls -la
          coverage combine coverage.*
          python3 -c 'import coverage,pprint; cov=coverage.Coverage(); cov.load();pprint.pprint(list(cov.get_data()._file_map.keys()))'
          coverage html --debug=pathmap

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html_report
          path: htmlcov

      - name: Get total
        id: total
        run: |
          echo "total=$(coverage report --format=total)" >> $GITHUB_OUTPUT

  publish:
    name: Publish coverage report
    needs: combine
    runs-on: ubuntu-latest

    steps:
      - name: Compute info for later steps
        id: info
        run: |
          set -xe
          export SHA10=$(echo {{ '${{ github.sha }}' }} | cut -c 1-10)
          export SLUG=$(date +'%Y%m%d')_$SHA10
          export REPORT_DIR=$COV_REPORT_BASE_DIR/$SLUG
          export REF={{'"${{ github.ref }}"'}}
          echo "total={{'${{ needs.combine.outputs.total }}'}}" >> $GITHUB_ENV
          echo "sha10=$SHA10" >> $GITHUB_ENV
          echo "slug=$SLUG" >> $GITHUB_ENV
          echo "report_dir=$REPORT_DIR" >> $GITHUB_ENV
          echo "branch=${REF#refs/heads/}" >> $GITHUB_ENV

      - name: Summarize
        run: |
          echo '### Total coverage: {{'${{ env.total }}'}}%' >> $GITHUB_STEP_SUMMARY

      - name: Checkout documentation pages branch
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: pages

      - name: Purge old documentation files
        run: cd pages && git rm -rf . || true

      - name: Download previously generated documentation
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: pages

      - name: Download coverage HTML report
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        uses: actions/download-artifact@v3
        with:
          name: html_report
          path: {{"pages/${{ env.report_dir }}"}}

      - name: Push to report repo
        if: {{"${{ github.ref == 'refs/heads/main' }}"}}
        env:
          COMMIT_MESSAGE: {{'${{ github.event.head_commit.message }}'}}
          REDIR_HTML: {{'"pages/${{ env.COV_REPORT_BASE_DIR }}/index.html"'}}
          BADGE_JSON: {{'"pages/${{ env.COV_REPORT_BASE_DIR }}/cov.json"'}}
          REPORT_URL: {{'"${{ env.DOCS_URL }}/${{ env.report_dir }}"'}}
        run: |
          set -xe
          # Make the redirect to the latest report.
          echo "<html><head>" > "$REDIR_HTML"
          echo "<meta http-equiv='refresh' content={{"'0;url=$REPORT_URL'"}} />" >> "$REDIR_HTML"
          echo "<body>Coverage report redirect..." >> "$REDIR_HTML"
          # Make the commit message.
          echo {{'"${{ env.total }}% - $COMMIT_MESSAGE"'}} > commit.txt
          echo "" >> commit.txt
          echo "$REPORT_URL" >> commit.txt
          echo {{'"${{ env.sha10 }}: ${{ env.branch }}"'}} >> commit.txt
          # Make badge json
          COL_MIN=10; COL_MAX=95;
          HUE=$(python3 -c "print(int(({{'${{ env.total }}'}} - $COL_MIN)/($COL_MAX - $COL_MIN) * 120))")
          echo "{\"schemaVersion\":1,\"label\":\"Coverage\",\"message\":\"{{'${{ env.total }}'}}%\",\"color\":\"hsl($HUE, 100%, 40%)\"}" > "$BADGE_JSON"
          # Commit.
          cd ./pages
          rm {{'${{ env.report_dir }}/.gitignore'}}
          # ls -la {{'${{ env.report_dir }}'}} # for debugging
          # {{"${{ env.report_dir }}"}}/* "${REDIR_HTML#*/}" "${BADGE_JSON#*/}"
          git add -A
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git commit --file=../commit.txt
          git push
          echo {{'"[$REPORT_URL]($REPORT_URL)"'}} >> $GITHUB_STEP_SUMMARY
